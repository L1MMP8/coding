#include <iostream>
#include <queue>
using namespace std;

class TreeNode {
public:
	int data;
	TreeNode* left;
	TreeNode* right;

	TreeNode(int value) : data(value), left(nullptr), right(nullptr) {}
};

class BinaryTree {
private:
	TreeNode* root;

public:
	BinaryTree() : root(nullptr) {}

	void insert(int value) {
		TreeNode* newNode = new TreeNode(value);
		if (!root) {
			root = newNode;
			return;
		}

		queue<TreeNode*> q;
		q.push(root);

		while (!q.empty()) {
			TreeNode* current = q.front();
			q.pop();

			if (!current->left) {
				current->left = newNode;
				return;
			}
			else {
				q.push(current->left);
			}

			if (!current->right) {
				current->right = newNode;
				return;
			}
			else {
				q.push(current->right);
			}
		}
	}

	void printBFS() {
		if (!root) {
			return;
		}

		queue<TreeNode*> q;
		q.push(root);

		while (!q.empty()) {
			TreeNode* current = q.front();
			q.pop();

			cout << current->data << " ";

			if (current->left) {
				q.push(current->left);
			}

			if (current->right) {
				q.push(current->right);
			}
		}
		cout << std::endl;
	}
};
	
int main() {
	BinaryTree tree;
	tree.insert(5);
	tree.insert(3);
	tree.insert(7);
	tree.insert(2);
	tree.insert(4);

	cout << "BFS traversal:" << std::endl;
	tree.printBFS();

	return 0;
}
